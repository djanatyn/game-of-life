(ns game-of-life.render
  (:use quil.core
        game-of-life.core)
  (:gen-class))

(def test-grid '[[. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . o . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . o . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . o o o . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . o o . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . o o . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . o o . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . o o . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . o o o . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]
                 [. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]])

(def grid-state (atom test-grid))

;; settings
;; --------
(def tile-size 10)
(def fps 10)

;; drawing functions
;; -----------------
(defn draw-block [color [x y]]
  (apply stroke color)
  (apply fill color)
  (rect x y tile-size tile-size))

(defn draw-grid [grid]
  (let [height (count grid)
        width  (count (first grid))]
    (doseq [tile (coords [width height])]
      (case (get-tile grid tile)
        o (draw-block [0 0 0] (map * [tile-size tile-size] tile))
        . (draw-block [255 255 255] (map * [tile-size tile-size] tile))))))

;; quil functions
;; --------------
(defn setup []
  (frame-rate fps)
  (background 0)
  (stroke-weight 0))

(defn draw []
  (background 0)
  (draw-grid @grid-state)
  (swap! grid-state tick))

(defn -main [& args]
  (defsketch game
    :title "blobs!"
    :setup setup
    :draw draw
    :size [(* tile-size (count @grid-state)) (* tile-size (count (first @grid-state)))]))
